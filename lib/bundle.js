"use strict";var e=require("@sveltejs/kit"),t=require("jsonwebtoken"),r=require("fs"),o=require("yaml"),n=require("path");let a,s,i,c,l,d={};const h=()=>{const e=process.env.PWD||process.cwd(),t=n.resolve(e,"tenants.yaml");if(!r.existsSync(t))throw new Error(`TENANT_YAML file not found at path: ${t}`);const a=r.readFileSync(t).toString();try{d=o.parse(a)}catch(e){throw new Error("TENANT_YAML is not valid YAML. err: err")}Object.entries(d).forEach((([e,t])=>{t.name=e}))};h();const u=e=>{if(!e)return!1;const t=e.split("@");if(2!==t.length)return!1;const r=t[0],o=t[1];if(r.length>64)return!1;if(o.length>255)return!1;return!o.split(".").some((function(e){return e.length>63}))&&!!/^[-!#$%&'*+\/0-9=?A-Z^_a-z`{|}~](\.?[-!#$%&'*+\/0-9=?A-Z^_a-z`{|}~])*@[a-zA-Z0-9](-*\.?[a-zA-Z0-9])*\.[a-zA-Z](-?[a-zA-Z0-9])+$/.test(e)},m={getToken:async(e,t,r)=>{const o={grant_type:"authorization_code",username:t,password:r,scope:"openid",client_id:e.client_id,client_secret:e.client_secret},n=new URLSearchParams(Object.entries(o)).toString();try{const t=await fetch(`${a}/realms/${e.realm}/protocol/openid-connect/auth`,{method:"POST",headers:{"Content-Type":"application/x-www-form-urlencoded"},body:n});return JSON.parse(await t.text())}catch(e){throw e}},getLoginForwardUrl:(e,t,r,o)=>{const n={response_type:"code",client_id:e.client_id,redirect_uri:r,response_mode:"jwt",scope:"openid roles email profile",grant_type:"authorization_code",state:t,login_hint:o||""},s=Object.entries(n).map((([e,t])=>`${e}=${encodeURIComponent(t)}`)).join("&");return`${a}/realms/${e.realm}/protocol/openid-connect/auth?${s}`},login:async(e,t,r)=>{const o={grant_type:"password",username:t,password:r,scope:"openid",client_id:e.client_id,client_secret:e.client_secret},n=new URLSearchParams(Object.entries(o)).toString();try{const t=await fetch(`${a}/realms/${e.realm}/protocol/openid-connect/token`,{method:"POST",headers:{"Content-Type":"application/x-www-form-urlencoded"},body:n});return JSON.parse(await t.text())}catch(e){throw e}},exchangeOneTimeCodeForAccessToken:async(e,t,r)=>{const o={client_id:e.client_id,client_secret:e.client_secret,redirect_uri:`${r.url.origin}${r.url.pathname}`,response_mode:"jwt",scope:"openid",grant_type:"authorization_code",code:t},n=m.convertParmsForBody(o),a=`${s}/realms/${e.realm}/protocol/openid-connect/token`,i=await fetch(a,{method:"POST",headers:{"Content-Type":"application/x-www-form-urlencoded"},body:n}),c=await i.text();return JSON.parse(c)},refresh:async(e,t)=>{if(!t)throw new Error("No Refresh Token Found");const r={client_id:e.client_id,client_secret:e.client_secret,grant_type:"refresh_token",token_type_hint:"access_token",refresh_token:t},o=new URLSearchParams(Object.entries(r)).toString();try{const t=await fetch(`${s}/realms/${e.realm}/protocol/openid-connect/token`,{method:"POST",headers:{"Content-Type":"application/x-www-form-urlencoded"},body:o});return JSON.parse(await t.text())}catch(e){throw console.error(`Token Refresh Failed: ${e}}`),e}},logout:async(e,r)=>{var o=t.decode(r);const n={client_id:e.client_id,client_secret:e.client_secret,token_type_hint:"access_token",token:o.sid,grant_type:"refresh_token",refresh_token:r},a=new URLSearchParams(Object.entries(n)).toString();try{return 204===(await fetch(`${s}/realms/${e.realm}/protocol/openid-connect/logout`,{method:"POST",headers:{"Content-Type":"application/x-www-form-urlencoded"},body:a})).status}catch(e){throw console.error("logout response error"),e}},getByTenantName:e=>{if(!e)throw new Error("Tenant Name undefined");if(!d[e.toLowerCase()])throw new Error(`Tenant ${e} not found`);return d[e.toLowerCase()]},getTenantByEmail:e=>{h();const t=e.split("@")[1].toLowerCase(),r=Object.values(d).filter((e=>e.email_domain===t));if(0===r.length)throw new Error(`No tenant matching ${e} domain`);return r[0]},convertParmsForBody:e=>new URLSearchParams(Object.entries(e)).toString()},p=e=>{["AuthorizationToken","RefreshToken","IdToken","LastPath","csrfCode","tenant"].forEach((t=>{e.cookies.set(t,"",{httpOnly:!0,path:"/",secure:!0,sameSite:"strict",maxAge:0})}))},g=async({event:r,resolve:o})=>{var n,a;console.debug("keycloakservice handle invoked"),console.debug(`event.url: ${r.url}`);const s=r.cookies.get("RefreshToken"),d=r.url.searchParams.get("response");if(r.url.pathname===i&&"POST"===r.request.method&&"?/login"===r.url.search){const t=null===(n=(await r.request.formData()).get("email"))||void 0===n?void 0:n.toString();if(!(!!t&&u(t))||!t)throw console.error(`Invalid email address: ${t}`),e.redirect(303,`${i}?err=invalidemail`);const o=r.cookies.get("csrfCode");if(!o)throw console.debug("Redirecting to login if no csrfCode code found"),e.redirect(303,i);const a=m.getTenantByEmail(t),s=r.cookies.get("LastPath"),c=`${r.url.origin}${null!=s?s:l}`,d=m.getLoginForwardUrl(a,o,c,t);throw console.debug("Redirecting to keycloak"),e.redirect(303,d)}if(!(s||r.url.pathname.startsWith(i)||r.url.pathname.startsWith(c)||d))throw r.cookies.set("LastPath",r.url.pathname,{httpOnly:!0,path:"/",secure:!0,sameSite:"lax",maxAge:600}),console.debug("No refresh token, unauthenticated user, redirecting to login"),e.redirect(302,i);if(!s&&r.url.pathname===i&&"GET"===r.request.method){if(!r.cookies.get("csrfCode")){const e=Math.random().toString().substring(2,15);r.cookies.set("csrfCode",e,{httpOnly:!0,path:"/",secure:!0,sameSite:"strict",maxAge:300})}return await o(r)}if(d&&!s){const n=t.decode(d);if(!n.iss)throw console.error('No "iss" in response, reqiured to get tenant/realm.'),e.redirect(302,i);try{const e=n.iss.split("/realms/")[1],o=m.getByTenantName(e),a=await m.exchangeOneTimeCodeForAccessToken(o,n.code,r);r.cookies.set("RefreshToken",a.refresh_token,{httpOnly:!0,path:"/",secure:!0,sameSite:"strict",maxAge:a.refresh_expires_in}),r.cookies.set("IdToken",a.id_token,{httpOnly:!0,path:"/",secure:!0,sameSite:"strict",maxAge:36e3});const s=t.decode(a.access_token);r.locals.user={loggedIn:!0,username:s.name,email:s.email,tenant:o.name,roles:s.realm_access.roles}}catch(t){throw console.error("Unable to Obtain Access Code from One-Time-use Code"),console.error(t),p(r),r.locals.user=null,e.redirect(302,i)}return await o(r)}if(!s&&r.url.pathname===c)return await o(r);const h=(null!==(a=t.decode(null!=s?s:"").iss)&&void 0!==a?a:"").toLowerCase().split("/realms/")[1],g=m.getByTenantName(h);if(!g)throw p(r),r.locals.user=null,e.redirect(302,i);if(s&&-1===[i,c].indexOf(r.url.pathname))try{const n=await m.refresh(g,s);if(r.cookies.set("RefreshToken",n.refresh_token,{httpOnly:!0,path:"/",secure:!0,sameSite:"strict",maxAge:n.refresh_expires_in}),n.error)throw console.error(`KeyCloakService: Token Refresh Failed. Clear cookies return to login page. Message: ${n.error_description}`),r.cookies.set("RefreshToken","",{httpOnly:!0,path:"/",secure:!0,sameSite:"strict",maxAge:0}),r.locals.user=null,e.redirect(302,i);const a=t.decode(n.access_token);r.locals.user={loggedIn:!0,username:a.name,email:a.email,tenant:g.name,roles:a.realm_access.roles};return await o(r)}catch(t){throw p(r),r.locals.user=null,e.redirect(302,i)}if(s&&r.url.pathname===c){try{await m.logout(g,s)}catch(e){console.error(`Logout Failed! ${e}`)}p(r),r.locals.user=null;const t=Math.random().toString().substring(2,15);throw r.cookies.set("csrfCode",t,{httpOnly:!0,path:"/",secure:!0,sameSite:"strict",maxAge:300}),await o(r),e.redirect(302,c)}return await o(r)};exports.KeyCloakHandle=e=>{var t;return a=e.keycloakUrl,s=e.keycloakInternalUrl,i=e.loginPath,c=e.logoutPath,l=null!==(t=e.postLoginPath)&&void 0!==t?t:"/",g},exports.emailValidator=u;
